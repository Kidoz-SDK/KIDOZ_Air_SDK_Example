<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="HomeView">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">		
		<s:Button id="showFeedView" label="Show Feed" click="showView();"/>		 	
		<s:Button id="expandPanel" label="Expand Panel" click="expandPanelView();"/>
		<s:Button id="colapsePanel" label="Close Panel" click="colapsePanelView();"/>		 	 
		<s:Button id="panelStatus" label="Get Panel Status" click="checkPanelViewStatus();"/>
		<s:Button id="addBanner" label="Add Banner" click="addBannerView();"/> 
		<s:Button id="changePos" label="Change Banner Pos" click="changeBannerAnchorPosition();"/> 
		<s:Button id="hide_Banner" label="Show Banner" click="showBanner();"/> 
		<s:Button id="show_Banner" label="Hide Banner" click="hideBanner();"/> 
		<s:Button id="add_FlexiView" label="Add Flexi" click="addFlexiView();"/> 
		<s:Button id="show_FlexiView" label="show Flexi" click="showFlexiView();"/> 
		<s:Button id="hide_FlexiView" label="hide Flexi" click="hideFlexiView();"/>
		<s:Button id="is_FlexiViewVisible" label="Get Flexi State" click="checkFlexiViewStatus();"/> 	
	</s:VGroup>
	
	
	<fx:Script>		
		<![CDATA[
			
			import com.kidoz.sdk.api.platforms.SdkController;
			//import com.kidoz.sdk.api.platforms.SdkController;
			
			/** Initiate Kidoz SDK by creating an SdkControler instance
			 * 
			 * @throws RuntimeException in case of invalid or missing publisher_id or security token
			 * (Please Set you our developer id and security token provided !!)
			 *  */
			//static var controller:SdkController = SdkController.initSdkContoller("5","i0tnrdwdtq0dm36cqcpg6uyuwupkj76s");				
			static var controller:SdkController = SdkController.initSdkContoller("5","i0tnrdwdtq0dm36cqcpg6uyuwupkj76s");
			
			/**
			 * Set Feed events listener
			 * Used to catch feed view events (Show/Dismiss)
			 *  */
			controller.setOnFeedViewEventListener(new FeedActionListener(controller));
			
			/**
			 * Set Panel View events listener
			 * Used to catch panel view events (Expand/Collaps)
			 *  */
			controller.setOnPanelViewEventListener(new PanelViewActionListener(controller));
			
			/**
			 * Set Banner View events listener
			 * Used to catch banner view events
			 *  */
			controller.setOnBannerViewEventListener(new BannerViewActionListener(controller));
			
			
			/**
			 * Set Flexi Point View events listener
			 * Used to catch Flexi point view events
			 *  */
			controller.setOnFlexiViewEventListener(new FlexiViewActionListener(controller));
			
			
			/**
			 * Set General events listener
			 * Used to catch General SDK events. In our case there are 2 (Player opened , Player closed)
			 *  */
			controller.setOnGeneralEventListener(new GeneralEventActionListener(controller));
			
			
			// For example purposes we add Feed Button And Panel View on application Start
			/** Add feed default Button to view */
			controller.addFeedButton(20,60);	
			
			/** Add feed Panel to View  */
			controller.addPanleView(SdkController.PANEL_TYPE_BOTTOM,SdkController.HANDLE_POSITION_END);	
			
			/** Set desired panel color (Optional) */
			controller.setPanelViewColor("#FF9F3087");
			
			/**
			 * Lounch feed view programmatically
			 * */
			private function showView():void {			
				controller.showFeedView();	
//				controller.setVolume(0.5);
//				controller.addFeedButton(0,0);
				trace("test test test");
			}
			
			/**
			 * Expand panel view programmatically
			 * */
			private function expandPanelView():void { 				
				controller.expandPanelView();	
//				controller.initSDK("5","i0tnrdwdtq0dm36cqcpg6uyuwupkj76s");
			}
			
			/**
			 * Collapse panel view programmatically
			 * */
			private function colapsePanelView():void {						
				controller.collapsePanelView();
				trace("oooOri colapsePanelView colapsePanelView colapsePanelView");
			}	
			
			/**
			 * Check panel view state
			 * */
			private function checkPanelViewStatus():void {							
				if(controller.isPanelExpanded()) {
					controller.printToastDebugLog("Panel status OPENED");
				}else {
					controller.printToastDebugLog("Panel status CLOSED");
				}
				
				trace ("checkPanelViewStatus");
			}		
			
			
			/**
			 * Add banner to view
			 *  */
			private function addBannerView():void {					
				controller.addBannerView(SdkController.BANNER_POSITION_TOP_RIGHT);
			}
			
			// Help variable for position changes
			static var currentPosition:Number = 0;
			
			/**
			 * Example of changing banner anchor position on runtime
			 *  */
			private function changeBannerAnchorPosition():void {	
				currentPosition++;
				if(currentPosition > SdkController.BANNER_POSITION_BOTTOM_RIGHT) {
					currentPosition = 0;
				}
				controller.changeBannerViewPosition(currentPosition);
				trace("changeBannerAnchorPosition");
			}
			
			
			/**
			 * Show banner view
			 *  */
			private function showBanner():void {	
				
				controller.showBannerView();
			}
			
			
			/**
			 * Hide banner view
			 *  */
			private function hideBanner():void {	
				
				controller.hideBannerView();
			}
			
			/**
			 * Hide banner view
			 *  */
			private function addFlexiView():void {	
				
				controller.addFlexiView(true,SdkController.FLEXI_VIEW_POSITION_TOP_END);
			}
			
			/**
			 * Hide banner view
			 *  */
			private function showFlexiView():void {	
				
				controller.showFlexiView();
			}
			
			
			/**
			 * Hide banner view
			 *  */
			private function hideFlexiView():void {	
				
				controller.hideFlexiView();
			}
			
			/**
			 * Check flexi view status
			 *  */
			private function checkFlexiViewStatus():void {	
				
				if(controller.getIsFlexiViewVisible()) {
					controller.printToastDebugLog("FlexiView Status : VISIBLE");
				}else {
					controller.printToastDebugLog("FlexiView Status : HIDDEN");
				}		
			}
		]]>
	</fx:Script>
</s:View>
